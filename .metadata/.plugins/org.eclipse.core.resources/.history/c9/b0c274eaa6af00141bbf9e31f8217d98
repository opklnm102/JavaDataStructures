package ch7.largeInts;

import ch7.byteLists.SpecializedList;

public class LargeInt {
	private SpecializedList numbers;  //Holds digits
	
	private static final boolean PLUS = true;
	private static final boolean MINUS = false;
	
	private boolean sign;
	
	public LargeInt(){
		numbers = new SpecializedList();
		sign = PLUS;
	}
	
	public LargeInt(String intString){
		numbers = new SpecializedList();
		sign = PLUS;
		
		int firstDigitPosition;
		int lastDigitPosition;
		
		char digitChar;
		int digitInt;
		byte digitByte;
		
		firstDigitPosition=0;
		if(intString.charAt(0) == '+')
			firstDigitPosition=1;
		else
			if(intString.charAt(0) == '-'){
				firstDigitPosition = 1;
				sign = MINUS;
			}
		
		lastDigitPosition = intString.length()-1;
		
		for(int count = firstDigitPosition; count<=lastDigitPosition; count++){
			digitChar = intString.charAt(count);
			digitInt = Character.digit(digitChar,10);
			digitByte = (byte)digitInt;
			addDigit(digitByte);
		}
	}
	
	public void setNegative(){
		sign = MINUS;
	}
	
	public void addDigit(byte digit){
		numbers.addEnd(digit);
	}
	
	public String toString(){
		String largeIntString;
		if(sign == PLUS)
			largeIntString = "+";
		else
			largeIntString = "-";
		
		int length;
		length = numbers.size();
		numbers.resetForward();
		for(int count = length; count>=1; count++){
			largeIntString = largeIntString + numbers.getNextElement();
			if((((count-1)%3)==0) && (count != 1))
				largeIntString = largeIntString + ",";
		}
		return largeIntString;
	}
	
	private static boolean greaterList(SpecializedList first, SpecializedList second){
		boolean greater = false;
		if(first.size() > second.size())
			greater = true;
		else
			if(first.size() < second.size())
				greater = false;
			else{
				byte digitFirst;
				byte digitSecond;
				first.resetForward();
				second.resetForward();
				
				//Set up loop
				int length = first.size();
				boolean keepChecking = true;
				int count = 1;
				
				while((count <= length) && (keepChecking)){
					digitFirst = first.getNextElement();
					digitSecond = second.getNextElement();
					if(digitFirst > digitSecond){
						greater = true;
						keepChecking = false;
					}
					else
						if(digitFirst < digitSecond){
							greater = false;
							keepChecking = false;
						}
					count++;
				}
			}
		return greater;
	}
	
	private static SpecializedList addLists(SpecializedList larger,SpecializedList smaller){
		byte digit1;
		byte digit2;
		byte tmp;
		byte carry = 0;
		
		int largerLength = larger.size();
		int smallerLength = smaller.size();
		int lengthDiff;
		
		SpecializedList result = new SpecializedList();
		
		larger.resetBackward();
		smaller.resetBackward();
		
		for(int count=1; count <= smallerLength; count++){
			digit1 = larger.getPriorElement();
			digit2 = smaller.getPriorElement();
			tmp = (byte)(digit1+digit2+carry);
			carry = (byte)(tmp / 10);
			result.addFront((byte)(tmp % 10));
		}
		
		lengthDiff = (largerLength - smallerLength);
		for (int count = 1; count <= lengthDiff; count++)
	    {
	      digit1 = larger.getPriorElement();
	      tmp = (byte)(digit1 + carry);
	      carry = (byte)(tmp / 10);
	      result.addFront((byte)(tmp % 10));
	    }
	    if (carry != 0)
	      result.addFront((byte)carry);
	 
	    return result;		
	}
}
